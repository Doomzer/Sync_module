/* soapJpiServiceSOAPProxy.cpp
   Generated by gSOAP 2.8.39 for ekasui.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapJpiServiceSOAPProxy.h"

JpiServiceSOAPProxy::JpiServiceSOAPProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	//JpiServiceSOAPProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

JpiServiceSOAPProxy::JpiServiceSOAPProxy(const JpiServiceSOAPProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

JpiServiceSOAPProxy::JpiServiceSOAPProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	//JpiServiceSOAPProxy_init(_soap->imode, _soap->omode);
}

JpiServiceSOAPProxy::JpiServiceSOAPProxy(const char *endpoint)
{	this->soap = soap_new();
	this->soap_own = true;
	//JpiServiceSOAPProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

JpiServiceSOAPProxy::JpiServiceSOAPProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	//JpiServiceSOAPProxy_init(iomode, iomode);
}

JpiServiceSOAPProxy::JpiServiceSOAPProxy(const char *endpoint, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	//JpiServiceSOAPProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

JpiServiceSOAPProxy::JpiServiceSOAPProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	//JpiServiceSOAPProxy_init(imode, omode);
}

JpiServiceSOAPProxy::~JpiServiceSOAPProxy()
{	if (this->soap_own)
		soap_free(this->soap);
}

void JpiServiceSOAPProxy::JpiServiceSOAPProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns1", "http://rzd.ocrv.maximo:8888/Services/GetJPI", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
JpiServiceSOAPProxy *JpiServiceSOAPProxy::copy()
{	JpiServiceSOAPProxy *dup = SOAP_NEW_COPY(JpiServiceSOAPProxy);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

JpiServiceSOAPProxy& JpiServiceSOAPProxy::operator=(const JpiServiceSOAPProxy& rhs)
{	if (this->soap_own)
		soap_free(this->soap);
	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void JpiServiceSOAPProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void JpiServiceSOAPProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	JpiServiceSOAPProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void JpiServiceSOAPProxy::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *JpiServiceSOAPProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *JpiServiceSOAPProxy::soap_fault()
{	return this->soap->fault;
}

const char *JpiServiceSOAPProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *JpiServiceSOAPProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int JpiServiceSOAPProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int JpiServiceSOAPProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void JpiServiceSOAPProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void JpiServiceSOAPProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *JpiServiceSOAPProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int JpiServiceSOAPProxy::GetJPI(const char *endpoint, const char *soap_action, _ns1__GetJpiRequest *ns1__GetJpiRequest, _ns1__GetJpiResponse &ns1__GetJpiResponse)
{	
	soap_imode(this->soap, SOAP_C_UTFSTRING);
	soap_omode(this->soap, SOAP_C_UTFSTRING);
	static const struct Namespace namespaces[] = {
		{ "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL },
		{ "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL },
		{ "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
		{ "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
		{ "ns1", "http://rzd.ocrv.maximo:8888/Services/GetJPI", NULL, NULL },
		{ NULL, NULL, NULL, NULL }
	};
	soap_set_namespaces(this->soap, namespaces);

	struct soap *soap = this->soap;
	struct __ns1__GetJPI soap_tmp___ns1__GetJPI;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.23.197.34:7818/aso/getjpi";
	if (soap_action == NULL)
		soap_action = "GetJPI";
	soap_tmp___ns1__GetJPI.ns1__GetJpiRequest = ns1__GetJpiRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetJPI(soap, &soap_tmp___ns1__GetJPI);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetJPI(soap, &soap_tmp___ns1__GetJPI, "-ns1:GetJPI", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetJPI(soap, &soap_tmp___ns1__GetJPI, "-ns1:GetJPI", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__GetJpiResponse*>(&ns1__GetJpiResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetJpiResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetJpiResponse.soap_get(soap, "ns1:GetJpiResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int JpiServiceSOAPProxy::SetJPI(const char *endpoint, const char *soap_action, _ns1__SetJpiRequest *ns1__SetJpiRequest, _ns1__SetJpiResponse &ns1__SetJpiResponse)
{	
	soap_imode(this->soap, SOAP_C_UTFSTRING);
	soap_omode(this->soap, SOAP_C_UTFSTRING);
	static const struct Namespace namespaces[] = {
		{ "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL },
		{ "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL },
		{ "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
		{ "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
		{ "ns1", "http://rzd.ocrv.maximo:8888/Services/SetJPI", NULL, NULL },
		{ NULL, NULL, NULL, NULL }
	};
	soap_set_namespaces(this->soap, namespaces);

	struct soap *soap = this->soap;
	struct __ns1__SetJPI soap_tmp___ns1__SetJPI;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.23.197.34:7818/aso/setjpi";
	if (soap_action == NULL)
		soap_action = "SetJPI";
	soap_tmp___ns1__SetJPI.ns1__SetJpiRequest = ns1__SetJpiRequest;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__SetJPI(soap, &soap_tmp___ns1__SetJPI);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetJPI(soap, &soap_tmp___ns1__SetJPI, "-ns1:SetJPI", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetJPI(soap, &soap_tmp___ns1__SetJPI, "-ns1:SetJPI", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__SetJpiResponse*>(&ns1__SetJpiResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__SetJpiResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetJpiResponse.soap_get(soap, "ns1:SetJpiResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
