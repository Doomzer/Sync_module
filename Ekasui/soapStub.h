/* soapStub.h
   Generated by gSOAP 2.8.39 for ekasui.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <deque>
#include <list>
#include <vector>
#include <set>
#define SOAP_NAMESPACE_OF_ns1	"http://rzd.ocrv.maximo:8888/Services/GetJPI"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20839
# error "GSOAP VERSION 20839 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class _ns1__SetJpiRequest_JPI;	/* ekasui.h:211 */
class _ns1__SetJpiRequest;	/* ekasui.h:147 */
class _ns1__SetJpiResponse;	/* ekasui.h:150 */
class _ns1__GetJpiRequest;	/* ekasui.h:153 */
class _ns1__GetJpiResponse_JPI;	/* ekasui.h:303 */
class _ns1__GetJpiResponse;	/* ekasui.h:156 */
struct __ns1__GetJPI;	/* ekasui.h:480 */
struct __ns1__SetJPI;	/* ekasui.h:551 */

/* ekasui.h:211 */
#ifndef SOAP_TYPE__ns1__SetJpiRequest_JPI
#define SOAP_TYPE__ns1__SetJpiRequest_JPI (18)
/* complex XSD type 'ns1:SetJpiRequest-JPI': */
class SOAP_CMAC _ns1__SetJpiRequest_JPI {
      public:
        /// Required element 'jpinstructionsid' of XSD type 'xsd:int'
        int jpinstructionsid;
        /// Required element 'result' of XSD type 'xsd:string'
        std::string result;
        /// Required element 'status' of XSD type 'xsd:string'
        std::string status;
        /// Required element 'dateresult' of XSD type 'ns1:dateTime'
        std::string dateresult;
        /// Optional element 'comments' of XSD type 'xsd:string'
        std::string *comments;
      public:
        /// Return unique type id SOAP_TYPE__ns1__SetJpiRequest_JPI
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__SetJpiRequest_JPI; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__SetJpiRequest_JPI, default initialized and not managed by a soap context
        virtual _ns1__SetJpiRequest_JPI *soap_alloc(void) const { return SOAP_NEW(_ns1__SetJpiRequest_JPI); }
      public:
        /// Constructor with initializations
        _ns1__SetJpiRequest_JPI()
        {
          jpinstructionsid = (int)0;
          comments = (std::string *)0;
        }
        virtual ~_ns1__SetJpiRequest_JPI() { }
        /// Friend allocator used by soap_new__ns1__SetJpiRequest_JPI(struct soap*, int)
        friend SOAP_FMAC1 _ns1__SetJpiRequest_JPI * SOAP_FMAC2 soap_instantiate__ns1__SetJpiRequest_JPI(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ekasui.h:147 */
#ifndef SOAP_TYPE__ns1__SetJpiRequest
#define SOAP_TYPE__ns1__SetJpiRequest (11)
/* complex XSD type 'ns1:SetJpiRequest': */
class SOAP_CMAC _ns1__SetJpiRequest {
      public:
        /// Optional element 'JPI' of XSD type 'ns1:SetJpiRequest-JPI'
        std::vector<_ns1__SetJpiRequest_JPI> *JPI;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__SetJpiRequest
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__SetJpiRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__SetJpiRequest, default initialized and not managed by a soap context
        virtual _ns1__SetJpiRequest *soap_alloc(void) const { return SOAP_NEW(_ns1__SetJpiRequest); }
      public:
        /// Constructor with initializations
        _ns1__SetJpiRequest()
        {
          JPI = (std::vector<_ns1__SetJpiRequest_JPI> *)0;
          soap = (struct soap *)0;
        }
		virtual ~_ns1__SetJpiRequest() { if (JPI) SOAP_DELETE(JPI); }
        /// Friend allocator used by soap_new__ns1__SetJpiRequest(struct soap*, int)
        friend SOAP_FMAC1 _ns1__SetJpiRequest * SOAP_FMAC2 soap_instantiate__ns1__SetJpiRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ekasui.h:150 */
#ifndef SOAP_TYPE__ns1__SetJpiResponse
#define SOAP_TYPE__ns1__SetJpiResponse (12)
/* complex XSD type 'ns1:SetJpiResponse': */
class SOAP_CMAC _ns1__SetJpiResponse {
      public:
        /// Optional element 'code' of XSD type 'xsd:string'
        std::string *code;
        /// Optional element 'description' of XSD type 'xsd:string'
        std::string *description;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__SetJpiResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__SetJpiResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__SetJpiResponse, default initialized and not managed by a soap context
        virtual _ns1__SetJpiResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__SetJpiResponse); }
      public:
        /// Constructor with initializations
        _ns1__SetJpiResponse()
        {
          code = (std::string *)0;
          description = (std::string *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__SetJpiResponse() { }
        /// Friend allocator used by soap_new__ns1__SetJpiResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__SetJpiResponse * SOAP_FMAC2 soap_instantiate__ns1__SetJpiResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ekasui.h:153 */
#ifndef SOAP_TYPE__ns1__GetJpiRequest
#define SOAP_TYPE__ns1__GetJpiRequest (13)
/* complex XSD type 'ns1:GetJpiRequest': */
class SOAP_CMAC _ns1__GetJpiRequest {
      public:
        /// Required element 'Date' of XSD type 'ns1:date'
        std::string Date;
        /// Required element 'Pred' of XSD type 'xsd:string'
        std::string Pred;
        /// Required element 'Podr' of XSD type 'xsd:string'
        std::string Podr;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetJpiRequest
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__GetJpiRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetJpiRequest, default initialized and not managed by a soap context
        virtual _ns1__GetJpiRequest *soap_alloc(void) const { return SOAP_NEW(_ns1__GetJpiRequest); }
      public:
        /// Constructor with initializations
        _ns1__GetJpiRequest()
        {
          soap = (struct soap *)0;
        }
        virtual ~_ns1__GetJpiRequest() { }
        /// Friend allocator used by soap_new__ns1__GetJpiRequest(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetJpiRequest * SOAP_FMAC2 soap_instantiate__ns1__GetJpiRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ekasui.h:303 */
#ifndef SOAP_TYPE__ns1__GetJpiResponse_JPI
#define SOAP_TYPE__ns1__GetJpiResponse_JPI (23)
/* complex XSD type 'ns1:GetJpiResponse-JPI': */
class SOAP_CMAC _ns1__GetJpiResponse_JPI {
      public:
        /// Required element 'jpinstructionsid' of XSD type 'xsd:int'
        int jpinstructionsid;
        /// Required element 'targstartdate' of XSD type 'ns1:date'
        std::string targstartdate;
        /// Required element 'jpnum' of XSD type 'xsd:string'
        std::string jpnum;
        /// Required element 'personid' of XSD type 'xsd:string'
        std::string personid;
        /// Required element 'pred' of XSD type 'xsd:string'
        std::string pred;
        /// Required element 'podr' of XSD type 'xsd:string'
        std::string podr;
        /// Required element 'tpperson' of XSD type 'xsd:string'
        std::string tpperson;
        /// Required element 'displayname' of XSD type 'xsd:string'
        std::string displayname;
        /// Optional element 'comments' of XSD type 'xsd:string'
        std::string *comments;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetJpiResponse_JPI
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__GetJpiResponse_JPI; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetJpiResponse_JPI, default initialized and not managed by a soap context
        virtual _ns1__GetJpiResponse_JPI *soap_alloc(void) const { return SOAP_NEW(_ns1__GetJpiResponse_JPI); }
      public:
        /// Constructor with initializations
        _ns1__GetJpiResponse_JPI()
        {
          jpinstructionsid = (int)0;
          comments = (std::string *)0;
        }
        virtual ~_ns1__GetJpiResponse_JPI() { }
        /// Friend allocator used by soap_new__ns1__GetJpiResponse_JPI(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetJpiResponse_JPI * SOAP_FMAC2 soap_instantiate__ns1__GetJpiResponse_JPI(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ekasui.h:156 */
#ifndef SOAP_TYPE__ns1__GetJpiResponse
#define SOAP_TYPE__ns1__GetJpiResponse (14)
/* complex XSD type 'ns1:GetJpiResponse': */
class SOAP_CMAC _ns1__GetJpiResponse {
      public:
        /// Optional element 'JPI' of XSD type 'ns1:GetJpiResponse-JPI'
        std::vector<_ns1__GetJpiResponse_JPI> *JPI;
        /// Optional element 'code' of XSD type 'xsd:string'
        std::string *code;
        /// Optional element 'description' of XSD type 'xsd:string'
        std::string *description;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetJpiResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__GetJpiResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetJpiResponse, default initialized and not managed by a soap context
        virtual _ns1__GetJpiResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__GetJpiResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetJpiResponse()
        {
          JPI = (std::vector<_ns1__GetJpiResponse_JPI> *)0;
          code = (std::string *)0;
          description = (std::string *)0;
          soap = (struct soap *)0;
        }
		virtual ~_ns1__GetJpiResponse() { if (JPI) SOAP_DELETE(JPI); }
        /// Friend allocator used by soap_new__ns1__GetJpiResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetJpiResponse * SOAP_FMAC2 soap_instantiate__ns1__GetJpiResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ekasui.h:480 */
#ifndef SOAP_TYPE___ns1__GetJPI
#define SOAP_TYPE___ns1__GetJPI (29)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetJPI {
      public:
        /** Optional element 'ns1:GetJpiRequest' of XSD type 'ns1:GetJpiRequest' */
        _ns1__GetJpiRequest *ns1__GetJpiRequest;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetJPI */
        int soap_type() const { return SOAP_TYPE___ns1__GetJPI; }
        /** Constructor with member initializations */
        __ns1__GetJPI()
        {
          ns1__GetJpiRequest = (_ns1__GetJpiRequest *)0;
        }
        /** Friend allocator used by soap_new___ns1__GetJPI(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__GetJPI * SOAP_FMAC2 soap_instantiate___ns1__GetJPI(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ekasui.h:551 */
#ifndef SOAP_TYPE___ns1__SetJPI
#define SOAP_TYPE___ns1__SetJPI (33)
/* Wrapper: */
struct SOAP_CMAC __ns1__SetJPI {
      public:
        /** Optional element 'ns1:SetJpiRequest' of XSD type 'ns1:SetJpiRequest' */
        _ns1__SetJpiRequest *ns1__SetJpiRequest;
      public:
        /** Return unique type id SOAP_TYPE___ns1__SetJPI */
        int soap_type() const { return SOAP_TYPE___ns1__SetJPI; }
        /** Constructor with member initializations */
        __ns1__SetJPI()
        {
          ns1__SetJpiRequest = (_ns1__SetJpiRequest *)0;
        }
        /** Friend allocator used by soap_new___ns1__SetJPI(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__SetJPI * SOAP_FMAC2 soap_instantiate___ns1__SetJPI(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ekasui.h:672 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (34)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header()
        {
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Header(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ekasui.h:672 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (35)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code()
        {
          SOAP_ENV__Value = (char *)0;
          SOAP_ENV__Subcode = (struct SOAP_ENV__Code *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Code(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ekasui.h:672 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (37)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail()
        {
          __any = (char *)0;
          __type = 0;
          fault = NULL;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Detail(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ekasui.h:672 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (40)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason()
        {
          SOAP_ENV__Text = (char *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Reason(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ekasui.h:672 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (41)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault()
        {
          faultcode = (char *)0;
          faultstring = (char *)0;
          faultactor = (char *)0;
          detail = (struct SOAP_ENV__Detail *)0;
          SOAP_ENV__Code = (struct SOAP_ENV__Code *)0;
          SOAP_ENV__Reason = (struct SOAP_ENV__Reason *)0;
          SOAP_ENV__Node = (char *)0;
          SOAP_ENV__Role = (char *)0;
          SOAP_ENV__Detail = (struct SOAP_ENV__Detail *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Fault(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* ekasui.h:101 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

/* ekasui.h:101 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

/* ekasui.h:169 */
#ifndef SOAP_TYPE_ns1__date
#define SOAP_TYPE_ns1__date (16)
typedef std::string ns1__date;
#endif

/* ekasui.h:174 */
#ifndef SOAP_TYPE_ns1__dateTime
#define SOAP_TYPE_ns1__dateTime (17)
typedef std::string ns1__dateTime;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* _ns1__GetJpiResponse_JPI has binding name '_ns1__GetJpiResponse_JPI' for type '' */
#ifndef SOAP_TYPE__ns1__GetJpiResponse_JPI
#define SOAP_TYPE__ns1__GetJpiResponse_JPI (23)
#endif

/* _ns1__SetJpiRequest_JPI has binding name '_ns1__SetJpiRequest_JPI' for type '' */
#ifndef SOAP_TYPE__ns1__SetJpiRequest_JPI
#define SOAP_TYPE__ns1__SetJpiRequest_JPI (18)
#endif

/* ns1__dateTime has binding name 'ns1__dateTime' for type 'ns1:dateTime' */
#ifndef SOAP_TYPE_ns1__dateTime
#define SOAP_TYPE_ns1__dateTime (17)
#endif

/* ns1__date has binding name 'ns1__date' for type 'ns1:date' */
#ifndef SOAP_TYPE_ns1__date
#define SOAP_TYPE_ns1__date (16)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (15)
#endif

/* _ns1__GetJpiResponse has binding name '_ns1__GetJpiResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetJpiResponse
#define SOAP_TYPE__ns1__GetJpiResponse (14)
#endif

/* _ns1__GetJpiRequest has binding name '_ns1__GetJpiRequest' for type '' */
#ifndef SOAP_TYPE__ns1__GetJpiRequest
#define SOAP_TYPE__ns1__GetJpiRequest (13)
#endif

/* _ns1__SetJpiResponse has binding name '_ns1__SetJpiResponse' for type '' */
#ifndef SOAP_TYPE__ns1__SetJpiResponse
#define SOAP_TYPE__ns1__SetJpiResponse (12)
#endif

/* _ns1__SetJpiRequest has binding name '_ns1__SetJpiRequest' for type '' */
#ifndef SOAP_TYPE__ns1__SetJpiRequest
#define SOAP_TYPE__ns1__SetJpiRequest (11)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (41)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (40)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (37)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (35)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (34)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (43)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (42)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (36)
#endif

/* _ns1__SetJpiRequest * has binding name 'PointerTo_ns1__SetJpiRequest' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__SetJpiRequest
#define SOAP_TYPE_PointerTo_ns1__SetJpiRequest (30)
#endif

/* _ns1__GetJpiRequest * has binding name 'PointerTo_ns1__GetJpiRequest' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetJpiRequest
#define SOAP_TYPE_PointerTo_ns1__GetJpiRequest (26)
#endif

/* std::vector<_ns1__GetJpiResponse_JPI> * has binding name 'PointerTostd__vectorTemplateOf_ns1__GetJpiResponse_JPI' for type '' */
#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__GetJpiResponse_JPI
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__GetJpiResponse_JPI (25)
#endif

/* std::vector<_ns1__SetJpiRequest_JPI> * has binding name 'PointerTostd__vectorTemplateOf_ns1__SetJpiRequest_JPI' for type '' */
#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__SetJpiRequest_JPI
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__SetJpiRequest_JPI (21)
#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (19)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/* std::vector<_ns1__GetJpiResponse_JPI>  has binding name 'std__vectorTemplateOf_ns1__GetJpiResponse_JPI' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns1__GetJpiResponse_JPI
#define SOAP_TYPE_std__vectorTemplateOf_ns1__GetJpiResponse_JPI (24)
#endif

/* std::vector<_ns1__SetJpiRequest_JPI>  has binding name 'std__vectorTemplateOf_ns1__SetJpiRequest_JPI' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns1__SetJpiRequest_JPI
#define SOAP_TYPE_std__vectorTemplateOf_ns1__SetJpiRequest_JPI (20)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
